Features:
- POSIX signals are not handled as the process using this library is required to install handlers for POSIX signals if needed.
- 


Notes:
- POSIX signals are not handled as the process using this library is required to install handlers for POSIX signals if needed.

/* TODO
 * - HOW TO MANAGE SPECIAL CHARACTERS
 * - HOW TO SERVE AS JAVA STREAM
 * - POSIX SIGNAL SUPPORT
 * - SUPPORT BLOCKING AND NON-BLOCKING MODE
 * - EFFICIENT BULK READ AND WRITE
 * - SWITCHING LISTENER MODE BETWEEN BULK AND SINGLE BYTE
 - EOF character received by read() in linux
 - send file see gtkterm
 - low latency https://subversion.assembla.com/svn/mtrobotag/trunk/ros_workspace/mtr-extra-libs/carmen-0.7.4/src/global/carmenserial.c
 - int count
 - num of bytes in tty buffer
 - reconsider whether error should be returned or exception should be thrown when read fails
 - pause - resume more gracefully and with consistency
 */
 
 NATIVE LIBRARY:
 
 unix
 - When read return -1 and errno != EINTR, how do we handle such condition gracefully.
 - How to destroy global reference to looper object
 - eventfd required really or not
 - review setting number of stop bits
 EPOLLWAKEUP

look how to use for error and data
epoll https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/

level triggered epoll()

remove epollpri

chk for error epollerr before reading data or identify that data is available for reading
 
 
 windows
 - sharing port need further analysis
 - getLinesStatus() how to get there status DTR, RTS, LOOP
 - rigorous testing for flow control required 
 - how more erros can ne caught and meaningful info can be displayed to user
 
--------------------------------------------------------------------
Synchronous blocking I/O
open in blocking mode, read will block

Synchronous non-blocking I/O
open in non-blocking mode, read will return EAGAIN or EWOULDBLOCK, inefficient due to app polling and
reduced  overall data throughput.

Asynchronous blocking I/O
open in non-blocking but use select() to block on read(), not advised for
high performance I/O.
--------------------------------------------------------------------

Troubleshooting guide:

1. Data can be received successfully but transmission does not work as expected.

- Faulty level shifter IC or USB-UART converter
- Flow control turned on, on the other side
- Connected to wrong pins (for example GPIO) on the other side

2. Data corruption or garbled data sent/received or both

- Faulty level shifter IC or USB-UART converter
- Incorrect setting of serial port (parity, baudrate etc.)

3. Neither transmission nor reception works

- Faulty level shifter IC or USB-UART converter
- Inverted connection on IO pins of level shifter
- Flow control turned on, on one of the side
- Incorrect setting of serial port (parity, baudrate etc.)
- Very noisy power supply input to hardware ICs used

